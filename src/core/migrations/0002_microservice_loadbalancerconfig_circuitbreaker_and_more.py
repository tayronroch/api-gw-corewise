# Generated by Django 5.2.5 on 2025-08-23 21:35

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Microservice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('service_type', models.CharField(choices=[('mpls_analyzer', 'MPLS Analyzer Service'), ('topology', 'Topology Service'), ('networking', 'Networking Service'), ('users', 'Users Service'), ('engineering', 'Engineering Service'), ('security', 'Security Service'), ('dashboards', 'Dashboards Service')], max_length=50)),
                ('version', models.CharField(default='1.0.0', max_length=20)),
                ('base_url', models.URLField(max_length=500)),
                ('health_check_url', models.URLField(max_length=500)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Maintenance'), ('error', 'Error')], default='active', max_length=20)),
                ('last_health_check', models.DateTimeField(blank=True, null=True)),
                ('response_time_ms', models.IntegerField(default=0)),
                ('is_public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Microservice',
                'verbose_name_plural': 'Microservices',
                'db_table': 'core_microservice',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LoadBalancerConfig',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('algorithm', models.CharField(choices=[('round_robin', 'Round Robin'), ('least_connections', 'Least Connections'), ('weighted_round_robin', 'Weighted Round Robin'), ('ip_hash', 'IP Hash')], default='round_robin', max_length=30)),
                ('weight', models.IntegerField(default=1)),
                ('max_connections', models.IntegerField(default=1000)),
                ('health_check_interval', models.IntegerField(default=30)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='load_balancer_configs', to='core.microservice')),
            ],
            options={
                'verbose_name': 'Load Balancer Configuration',
                'verbose_name_plural': 'Load Balancer Configurations',
                'db_table': 'core_load_balancer_config',
            },
        ),
        migrations.CreateModel(
            name='CircuitBreaker',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('state', models.CharField(choices=[('closed', 'Closed'), ('open', 'Open'), ('half_open', 'Half-Open')], default='closed', max_length=20)),
                ('failure_count', models.IntegerField(default=0)),
                ('threshold', models.IntegerField(default=5)),
                ('last_failure', models.DateTimeField(blank=True, null=True)),
                ('opened_at', models.DateTimeField(blank=True, null=True)),
                ('timeout_seconds', models.IntegerField(default=60)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='circuit_breaker', to='core.microservice')),
            ],
            options={
                'verbose_name': 'Circuit Breaker',
                'verbose_name_plural': 'Circuit Breakers',
                'db_table': 'core_circuit_breaker',
            },
        ),
        migrations.CreateModel(
            name='APIRoute',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('route_type', models.CharField(choices=[('proxy', 'Proxy Route'), ('aggregate', 'Aggregate Route'), ('transform', 'Transform Route')], default='proxy', max_length=20)),
                ('path_pattern', models.CharField(max_length=200, unique=True)),
                ('target_path', models.CharField(max_length=200)),
                ('http_method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('PATCH', 'PATCH'), ('DELETE', 'DELETE')], max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('timeout_ms', models.IntegerField(default=30000)),
                ('retry_count', models.IntegerField(default=3)),
                ('circuit_breaker_enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('target_service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='routes', to='core.microservice')),
            ],
            options={
                'verbose_name': 'API Route',
                'verbose_name_plural': 'API Routes',
                'db_table': 'core_api_route',
                'ordering': ['path_pattern'],
            },
        ),
        migrations.CreateModel(
            name='AuditEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('LOGIN_SUCCESS', 'Login Success'), ('LOGIN_FAIL', 'Login Fail'), ('LOGOUT', 'Logout'), ('REGISTER', 'Register'), ('TOKEN_REFRESH', 'Token Refresh'), ('API_CALL', 'API Call')], db_index=True, max_length=32)),
                ('ip', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('path', models.CharField(max_length=512)),
                ('method', models.CharField(max_length=10)),
                ('status_code', models.PositiveIntegerField()),
                ('success', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('correlation_id', models.CharField(blank=True, db_index=True, max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Event',
                'verbose_name_plural': 'Audit Events',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['action', 'created_at'], name='core_audite_action_3957f4_idx')],
            },
        ),
        migrations.CreateModel(
            name='ServiceEndpoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('path', models.CharField(max_length=200)),
                ('method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('PATCH', 'PATCH'), ('DELETE', 'DELETE')], max_length=10)),
                ('description', models.TextField(blank=True)),
                ('requires_auth', models.BooleanField(default=True)),
                ('rate_limit', models.IntegerField(default=1000)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='endpoints', to='core.microservice')),
            ],
            options={
                'verbose_name': 'Service Endpoint',
                'verbose_name_plural': 'Service Endpoints',
                'db_table': 'core_service_endpoint',
                'unique_together': {('service', 'path', 'method')},
            },
        ),
        migrations.CreateModel(
            name='ServiceMetrics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('response_time_ms', models.IntegerField()),
                ('request_count', models.IntegerField(default=1)),
                ('error_count', models.IntegerField(default=0)),
                ('success_rate', models.FloatField(default=100.0)),
                ('cpu_usage', models.FloatField(blank=True, null=True)),
                ('memory_usage', models.FloatField(blank=True, null=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='core.microservice')),
            ],
            options={
                'verbose_name': 'Service Metrics',
                'verbose_name_plural': 'Service Metrics',
                'db_table': 'core_service_metrics',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['service', 'timestamp'], name='core_servic_service_7a8803_idx'), models.Index(fields=['timestamp'], name='core_servic_timesta_b4fbb7_idx')],
            },
        ),
    ]
