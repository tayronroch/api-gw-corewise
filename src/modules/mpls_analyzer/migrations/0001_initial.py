# Generated by Django 5.2.5 on 2025-08-24 19:51

import django.db.models.deletion
import modules.mpls_analyzer.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('location', models.CharField(blank=True, max_length=100)),
                ('equipment_type', models.CharField(choices=[('PE', 'Provider Edge'), ('CE', 'Customer Edge'), ('P', 'Provider')], max_length=50)),
                ('status', models.CharField(choices=[('active', 'Ativo'), ('inactive', 'Inativo'), ('maintenance', 'Manutenção')], default='active', max_length=20)),
                ('last_backup', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('interface_type', models.CharField(choices=[('physical', 'Physical'), ('lag', 'LAG')], max_length=20)),
                ('speed', models.CharField(blank=True, max_length=20)),
                ('is_customer_interface', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Vpn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vpn_id', models.IntegerField(db_index=True)),
                ('description', models.CharField(blank=True, db_index=True, max_length=200)),
                ('neighbor_ip', models.GenericIPAddressField()),
                ('neighbor_hostname', models.CharField(blank=True, max_length=100)),
                ('pw_type', models.CharField(max_length=50)),
                ('pw_id', models.IntegerField()),
                ('encapsulation', models.CharField(blank=True, max_length=100)),
                ('encapsulation_type', models.CharField(choices=[('untagged', 'Untagged'), ('vlan_tagged', 'VLAN Tagged'), ('qinq', 'QinQ')], default='untagged', max_length=20)),
                ('access_interface', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='BackupProcessLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField()),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('running', 'Executando'), ('completed', 'Concluído'), ('failed', 'Falhou')], max_length=20)),
                ('processed_files', models.IntegerField(default=0)),
                ('total_files', models.IntegerField(default=0)),
                ('errors', models.TextField(blank=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='EquipmentJsonBackup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backup_date', models.DateTimeField()),
                ('json_data', models.JSONField(help_text='JSON completo do equipamento DMOS')),
                ('file_name', models.CharField(blank=True, max_length=255)),
                ('file_size', models.PositiveIntegerField(default=0)),
                ('processed_at', models.DateTimeField(auto_now_add=True)),
                ('total_interfaces', models.PositiveIntegerField(default=0)),
                ('total_lags', models.PositiveIntegerField(default=0)),
                ('total_vpns', models.PositiveIntegerField(default=0)),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='json_backups', to='mpls_analyzer.equipment')),
            ],
            options={
                'ordering': ['-backup_date'],
            },
        ),
        migrations.CreateModel(
            name='LagMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member_interface_name', models.CharField(max_length=100)),
                ('lag_interface', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='mpls_analyzer.interface')),
            ],
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('success', models.BooleanField(default=False)),
                ('failure_reason', models.CharField(blank=True, max_length=200)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['username', 'ip_address', '-timestamp'], name='mpls_analyz_usernam_8d9455_idx'), models.Index(fields=['ip_address', '-timestamp'], name='mpls_analyz_ip_addr_035078_idx'), models.Index(fields=['success', '-timestamp'], name='mpls_analyz_success_f0d6d0_idx')],
            },
        ),
        migrations.CreateModel(
            name='MplsConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backup_date', models.DateTimeField()),
                ('raw_config', models.TextField()),
                ('processed_at', models.DateTimeField(auto_now_add=True)),
                ('search_vector', modules.mpls_analyzer.models.SearchVectorField(blank=True, null=True)),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mpls_configs', to='mpls_analyzer.equipment')),
                ('json_backup', models.ForeignKey(blank=True, help_text='Referência ao JSON completo de onde foram extraídos estes dados', null=True, on_delete=django.db.models.deletion.SET_NULL, to='mpls_analyzer.equipmentjsonbackup')),
            ],
            options={
                'ordering': ['-backup_date'],
            },
        ),
        migrations.CreateModel(
            name='LdpNeighbor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('neighbor_ip', models.GenericIPAddressField()),
                ('targeted', models.BooleanField(default=False)),
                ('mpls_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ldp_neighbors', to='mpls_analyzer.mplsconfiguration')),
            ],
        ),
        migrations.AddField(
            model_name='interface',
            name='mpls_config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interfaces', to='mpls_analyzer.mplsconfiguration'),
        ),
        migrations.CreateModel(
            name='SecuritySettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_login_attempts', models.PositiveIntegerField(default=5, help_text='Número máximo de tentativas de login antes do bloqueio')),
                ('lockout_duration_minutes', models.PositiveIntegerField(default=15, help_text='Duração do bloqueio em minutos após exceder tentativas')),
                ('session_timeout_minutes', models.PositiveIntegerField(default=120, help_text='Tempo limite da sessão em minutos (0 = nunca expira)')),
                ('audit_retention_days', models.PositiveIntegerField(default=90, help_text='Quantos dias manter logs de auditoria (0 = manter sempre)')),
                ('enable_ip_whitelist', models.BooleanField(default=False, help_text='Habilitar lista de IPs permitidos')),
                ('allowed_ips', models.TextField(blank=True, help_text='IPs permitidos (um por linha, suporta CIDR)')),
                ('password_min_length', models.PositiveIntegerField(default=8, help_text='Comprimento mínimo da senha')),
                ('password_require_uppercase', models.BooleanField(default=True, help_text='Exigir pelo menos uma letra maiúscula')),
                ('password_require_lowercase', models.BooleanField(default=True, help_text='Exigir pelo menos uma letra minúscula')),
                ('password_require_numbers', models.BooleanField(default=True, help_text='Exigir pelo menos um número')),
                ('password_require_symbols', models.BooleanField(default=False, help_text='Exigir pelo menos um símbolo especial')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(blank=True, help_text='Usuário que fez a última alteração', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Configurações de Segurança',
                'verbose_name_plural': 'Configurações de Segurança',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('require_mfa', models.BooleanField(default=True, help_text='Usuário deve usar MFA para fazer login')),
                ('is_admin', models.BooleanField(default=False, help_text='Usuário tem acesso ao painel administrativo')),
                ('last_password_change', models.DateTimeField(blank=True, null=True)),
                ('failed_login_attempts', models.IntegerField(default=0)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('mfa_secret', models.CharField(blank=True, help_text='Secret TOTP para MFA', max_length=32, null=True)),
                ('mfa_enabled', models.BooleanField(default=False, help_text='MFA está ativo para este usuário')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('service_type', models.CharField(choices=[('internet', 'Internet'), ('vpn', 'VPN'), ('voice', 'Voz'), ('data', 'Dados')], max_length=50)),
                ('bandwidth', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('vpn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_services', to='mpls_analyzer.vpn')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='VpwsGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=100)),
                ('mpls_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vpws_groups', to='mpls_analyzer.mplsconfiguration')),
            ],
        ),
        migrations.AddField(
            model_name='vpn',
            name='vpws_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vpns', to='mpls_analyzer.vpwsgroup'),
        ),
        migrations.CreateModel(
            name='AccessLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('login_time', models.DateTimeField(auto_now_add=True)),
                ('logout_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('success', 'Sucesso'), ('failed', 'Falha'), ('logout', 'Logout')], max_length=20)),
                ('session_key', models.CharField(blank=True, max_length=40)),
                ('failure_reason', models.CharField(blank=True, max_length=200)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-login_time'],
                'indexes': [models.Index(fields=['user', '-login_time'], name='mpls_analyz_user_id_21e789_idx'), models.Index(fields=['ip_address', '-login_time'], name='mpls_analyz_ip_addr_158fb2_idx'), models.Index(fields=['status', '-login_time'], name='mpls_analyz_status_cd7f9b_idx')],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('search', 'Busca realizada'), ('report_export', 'Relatório exportado'), ('view_equipment', 'Visualizar equipamento'), ('view_vpn', 'Visualizar VPN'), ('backup_process', 'Processo de backup'), ('config_download', 'Download de configuração'), ('user_management', 'Gerenciamento de usuário'), ('system_settings', 'Configurações do sistema')], max_length=50)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('target_object_type', models.CharField(blank=True, max_length=50)),
                ('target_object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('search_query', models.TextField(blank=True)),
                ('export_format', models.CharField(blank=True, max_length=20)),
                ('results_count', models.PositiveIntegerField(blank=True, null=True)),
                ('additional_data', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', '-timestamp'], name='mpls_analyz_user_id_257424_idx'), models.Index(fields=['action', '-timestamp'], name='mpls_analyz_action_f32b5b_idx'), models.Index(fields=['ip_address', '-timestamp'], name='mpls_analyz_ip_addr_ed2e78_idx'), models.Index(fields=['target_object_type', 'target_object_id'], name='mpls_analyz_target__a1c6b9_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='equipmentjsonbackup',
            index=models.Index(fields=['equipment', '-backup_date'], name='mpls_analyz_equipme_c36158_idx'),
        ),
        migrations.AddIndex(
            model_name='equipmentjsonbackup',
            index=models.Index(fields=['backup_date'], name='mpls_analyz_backup__1b8ecf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='equipmentjsonbackup',
            unique_together={('equipment', 'backup_date')},
        ),
        migrations.AlterUniqueTogether(
            name='lagmember',
            unique_together={('lag_interface', 'member_interface_name')},
        ),
        migrations.AlterUniqueTogether(
            name='ldpneighbor',
            unique_together={('mpls_config', 'neighbor_ip')},
        ),
        migrations.AddIndex(
            model_name='interface',
            index=models.Index(fields=['name'], name='mpls_analyz_name_26dcb3_idx'),
        ),
        migrations.AddIndex(
            model_name='interface',
            index=models.Index(fields=['is_customer_interface'], name='mpls_analyz_is_cust_9f82cd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='interface',
            unique_together={('mpls_config', 'name')},
        ),
        migrations.AddIndex(
            model_name='vpn',
            index=models.Index(fields=['vpn_id'], name='mpls_analyz_vpn_id_95a5e4_idx'),
        ),
        migrations.AddIndex(
            model_name='vpn',
            index=models.Index(fields=['description'], name='mpls_analyz_descrip_67c864_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vpn',
            unique_together={('vpws_group', 'vpn_id')},
        ),
    ]
